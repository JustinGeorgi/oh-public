uid: jag_rules:bayesian_sensor_activation
label: Bayesian Sensor Activation
description: Calculate new probabilities for bayesian sensor groups
configDescriptions: []
triggers: []
conditions: []
actions:
  - inputs: {}
    id: "1"
    configuration:
      type: application/javascript
      script: >
        /****

        / This Script calculates probabilities

        / for the Bayesian sensor system.

        ****/


        //Logging

        console.loggerName = 'org.openhab.automation.rule.bayesiansensor';

        //osgi.getService('org.apache.karaf.log.core.LogService').setLevel(console.loggerName,
        'INFO');

        console.debug('Bayesian Sensor - Recalculating')


        //Bayesian Probability Calculation

        function updatePrior (updPrior, updPTrue, updPFalse, updItem) {
          var numerator = updPTrue * updPrior;
          var denominator = numerator + updPFalse * (1 - updPrior);
          console.debug(`${updItem}: ${updPrior.toString()} -> ${(numerator / denominator).toString()}`);
          return numerator / denominator;
        }


        //Find All Bayesian Sensor Groups for Event Item

        var parentGroups = items.getItem(event.itemName).groupNames;

        var sensorGroups = parentGroups.filter(x =>
        items.getItem(x).tags.includes('Bayesian Sensor'));


        //Define Test Object

        var sensorTest = {
          'gt': (sItem, test) => { return items[sItem].numericState > test[sItem].testState },
          'lt': (sItem, test) => { return items[sItem].numericState < test[sItem].testState },
          'bt': (sItem, test) => { return (test[sItem].testState[0] > items[sItem].numericState) && (items[sItem].numericState > test[sItem].testState[1]) },
          'neq': (sItem, test) => { return items[it].state != sL[it].testState },
          'list': (sItem, test) => { return test[sItem].testState.contains(items[sItem].state) },
          'eq': (sItem, test) => { return items[sItem].state == test[sItem].testState }
        }


        //Read BayesianSensor MetaData and Iterate Through Sensors for Each
        Impacted Sensor Group

        for (var sensorGroup of sensorGroups) {
          var metaList = items[sensorGroup].getMetadata('BayesianSensor');
          if (!metaList || !metaList.configuration) {
            console.error(`Bayesian metadata not configured for ${sensorGroup}`);
          } else {
            var sensorConfig = metaList.configuration;
            var obsList = sensorConfig.obs;
            var prior = sensorConfig.prior || 0.5;
              for (var checkItem in obsList) {
                if (sensorTest[obsList[checkItem].testType || 'eq'](checkItem, obsList)) {
                  if (obsList[checkItem].decay) {
                    var now = time.toZDT()
                    var changedTime = time.toZDT(items.getItem(obsList[checkItem].decay.timestamp || checkItem + '_TS'));
                    var decayTime = time.Duration.between(changedTime,now).toMinutes();
                    var numSteps = Math.floor(decayTime / (obsList[checkItem].decay.timeStep || 5));
                    var probTrue = Math.max((obsList[checkItem].decay.decayMin || .6),obsList[checkItem].pTrue - (numSteps * obsList[checkItem].decay.decayStep));
                  } else {
                    var probTrue = obsList[checkItem].pTrue;
                  }
                  prior = updatePrior(prior, probTrue,obsList[checkItem].pFalse,checkItem)
                }
              }
            if (sensorConfig.posterior) items.getItem(sensorConfig.posterior).postUpdate(prior.toString());
            items.getItem(sensorConfig.proxy).sendCommandIfDifferent((prior >= sensorConfig.threshold) ? (sensorConfig.trueState || 'ON') : (sensorConfig.falseState || 'OFF'));
            console.debug(`${sensorGroup} new probability of ${prior} ${(prior >= sensorConfig.threshold) ? ' is over ' : 'is under '} ${sensorConfig.threshold}`);
          }
        }
    type: script.ScriptAction
